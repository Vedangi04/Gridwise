{"ast":null,"code":"var _jsxFileName = \"C:\\\\FinalProject\\\\my-dashboard-app\\\\src\\\\components\\\\LineGraph.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { format } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineGraph({\n  data\n}) {\n  // Check if data is an array\n  if (!Array.isArray(data)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error: Data is not an array\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Extract Time, Actual Power, and Predicted Power from the data array\n  const parsedData = data.map(item => ({\n    ...item,\n    Time: new Date(item.Time)\n  }));\n  const labels = parsedData.map(item => format(item.Time, 'dd-MM-yyyy HH:mm:ss'));\n  const actualPower = parsedData.map(item => item['Actual Power']);\n  const predictedPower = parsedData.map(item => item['Predicted Power']);\n\n  // Define the chart data\n  const chartData = {\n    labels: labels,\n    datasets: [{\n      label: 'Actual Power',\n      data: actualPower,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }, {\n      label: 'Predicted Power',\n      data: predictedPower,\n      borderColor: 'rgb(255, 99, 132)',\n      tension: 0.1\n    }]\n  };\n\n  // Define the chart options\n  const chartOptions = {\n    scales: {\n      x: {\n        type: 'time',\n        title: {\n          display: true,\n          text: 'Time'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Power'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Line Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","Line","format","jsxDEV","_jsxDEV","LineGraph","data","Array","isArray","children","fileName","_jsxFileName","lineNumber","columnNumber","parsedData","map","item","Time","Date","labels","actualPower","predictedPower","chartData","datasets","label","borderColor","tension","chartOptions","scales","x","type","title","display","text","y","options","_c","$RefreshReg$"],"sources":["C:/FinalProject/my-dashboard-app/src/components/LineGraph.js"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { format } from 'date-fns';\r\n\r\nfunction LineGraph({ data }) {\r\n  // Check if data is an array\r\n  if (!Array.isArray(data)) {\r\n    return <div>Error: Data is not an array</div>;\r\n  }\r\n\r\n  // Extract Time, Actual Power, and Predicted Power from the data array\r\n  const parsedData = data.map(item => ({\r\n    ...item,\r\n    Time: new Date(item.Time)\r\n  }));\r\n  const labels = parsedData.map(item => format(item.Time, 'dd-MM-yyyy HH:mm:ss'));\r\n  const actualPower = parsedData.map(item => item['Actual Power']);\r\n  const predictedPower = parsedData.map(item => item['Predicted Power']);\r\n\r\n  // Define the chart data\r\n  const chartData = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: 'Actual Power',\r\n        data: actualPower,\r\n        borderColor: 'rgb(75, 192, 192)',\r\n        tension: 0.1\r\n      },\r\n      {\r\n        label: 'Predicted Power',\r\n        data: predictedPower,\r\n        borderColor: 'rgb(255, 99, 132)',\r\n        tension: 0.1\r\n      }\r\n    ]\r\n  };\r\n\r\n  // Define the chart options\r\n  const chartOptions = {\r\n    scales: {\r\n      x: {\r\n        type: 'time',\r\n        title: {\r\n          display: true,\r\n          text: 'Time'\r\n        }\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Power'\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Line Graph</h2>\r\n      <Line data={chartData} options={chartOptions} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,SAASA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAC3B;EACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;IACxB,oBAAOF,OAAA;MAAAK,QAAA,EAAK;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC/C;;EAEA;EACA,MAAMC,UAAU,GAAGR,IAAI,CAACS,GAAG,CAACC,IAAI,KAAK;IACnC,GAAGA,IAAI;IACPC,IAAI,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACC,IAAI;EAC1B,CAAC,CAAC,CAAC;EACH,MAAME,MAAM,GAAGL,UAAU,CAACC,GAAG,CAACC,IAAI,IAAId,MAAM,CAACc,IAAI,CAACC,IAAI,EAAE,qBAAqB,CAAC,CAAC;EAC/E,MAAMG,WAAW,GAAGN,UAAU,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAAC,cAAc,CAAC,CAAC;EAChE,MAAMK,cAAc,GAAGP,UAAU,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAAC,iBAAiB,CAAC,CAAC;;EAEtE;EACA,MAAMM,SAAS,GAAG;IAChBH,MAAM,EAAEA,MAAM;IACdI,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,cAAc;MACrBlB,IAAI,EAAEc,WAAW;MACjBK,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE;IACX,CAAC,EACD;MACEF,KAAK,EAAE,iBAAiB;MACxBlB,IAAI,EAAEe,cAAc;MACpBI,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG;IACnBC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,IAAI,EAAE,MAAM;QACZC,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;QACR;MACF,CAAC;MACDC,CAAC,EAAE;QACDH,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;QACR;MACF;IACF;EACF,CAAC;EAED,oBACE7B,OAAA;IAAAK,QAAA,gBACEL,OAAA;MAAAK,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBT,OAAA,CAACH,IAAI;MAACK,IAAI,EAAEgB,SAAU;MAACa,OAAO,EAAER;IAAa;MAAAjB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV;AAACuB,EAAA,GA3DQ/B,SAAS;AA6DlB,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}