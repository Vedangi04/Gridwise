{"ast":null,"code":"var _jsxFileName = \"C:\\\\FinalProject\\\\my-dashboard-app\\\\src\\\\components\\\\LineGraph.js\";\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { format } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineGraph({\n  data\n}) {\n  console.log('CCCCCCCCCCCC ', data);\n  // Check if data is an array\n  if (!Array.isArray(data)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error: Data is not an array\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Extract Time, Actual Power, and Predicted Power from the data array\n  const parsedData = data.map(item => ({\n    ...item,\n    Time: convertDateFormat(item.Time)\n  }));\n  console.log('PPPPPPPPPPPPPPPPP', parsedData.map(item => item.Time));\n  const labels = parsedData.map(item => item.Time);\n  console.log('KKKKKK', labels);\n  const actualPower = parsedData.map(item => item['Actual Power']);\n  console.log('KKKKKK', actualPower);\n  const predictedPower = parsedData.map(item => item['Predicted Power']);\n  console.log('KKKKKK', predictedPower);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Line Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 600,\n      height: 300,\n      data: parsedData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"Actual Power\",\n        stroke: \"rgb(75, 192, 192)\",\n        dot: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"Predicted Power\",\n        stroke: \"rgb(255, 99, 132)\",\n        dot: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_c = LineGraph;\nfunction convertDateFormat(inputDate) {\n  // Split the input date string into components\n  const parsedDate = new Date(inputDate);\n\n  // Format the date in the desired format (YYYY-MM-DDTHH:mm:ss)\n  const formattedDate = format(parsedDate, \"yyyy-MM-dd'T'HH:mm:ss\");\n  return formattedDate;\n}\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","format","jsxDEV","_jsxDEV","LineGraph","data","console","log","Array","isArray","children","fileName","_jsxFileName","lineNumber","columnNumber","parsedData","map","item","Time","convertDateFormat","labels","actualPower","predictedPower","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","dot","_c","inputDate","parsedDate","Date","formattedDate","$RefreshReg$"],"sources":["C:/FinalProject/my-dashboard-app/src/components/LineGraph.js"],"sourcesContent":["import React from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\nimport { format } from 'date-fns';\r\n\r\nfunction LineGraph({ data }) {\r\n  console.log('CCCCCCCCCCCC ', data);\r\n  // Check if data is an array\r\n  if (!Array.isArray(data)) {\r\n    return <div>Error: Data is not an array</div>;\r\n  }\r\n\r\n  // Extract Time, Actual Power, and Predicted Power from the data array\r\n  const parsedData = data.map(item => ({\r\n    ...item,\r\n    Time: convertDateFormat(item.Time)\r\n  }));\r\n  console.log('PPPPPPPPPPPPPPPPP', parsedData.map(item => item.Time));\r\n  const labels = parsedData.map(item => item.Time);\r\n  console.log('KKKKKK', labels);\r\n  const actualPower = parsedData.map(item => item['Actual Power']);\r\n  console.log('KKKKKK', actualPower);\r\n  const predictedPower = parsedData.map(item => item['Predicted Power']);\r\n  console.log('KKKKKK', predictedPower);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Line Graph</h2>\r\n      <LineChart\r\n        width={600}\r\n        height={300}\r\n        data={parsedData}\r\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"Time\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line\r\n          type=\"monotone\"\r\n          dataKey=\"Actual Power\"\r\n          stroke=\"rgb(75, 192, 192)\"\r\n          dot={false}\r\n        />\r\n        <Line\r\n          type=\"monotone\"\r\n          dataKey=\"Predicted Power\"\r\n          stroke=\"rgb(255, 99, 132)\"\r\n          dot={false}\r\n        />\r\n      </LineChart>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction convertDateFormat(inputDate) {\r\n  // Split the input date string into components\r\n  const parsedDate = new Date(inputDate);\r\n\r\n  // Format the date in the desired format (YYYY-MM-DDTHH:mm:ss)\r\n  const formattedDate = format(parsedDate, \"yyyy-MM-dd'T'HH:mm:ss\");\r\n\r\n  return formattedDate;\r\n}\r\n\r\nexport default LineGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}